name: Check inputs and gather data

on:
  workflow_dispatch:
  workflow_call:

jobs:
  deploy:
    name: Check inputs and gather data
    runs-on: ubuntu-latest
    steps:
      - name: Check that the secrets are set in the repository
        id: check_secrets_set
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          result=0
          printf "### Checking if secrets are set 🔐\n\n" >> $GITHUB_STEP_SUMMARY
          printf "| Secret | Description |" >> $GITHUB_STEP_SUMMARY
          printf "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            printf "| ❌ `CLOUDFLARE_API_TOKEN`| Please go to [https://dash.cloudflare.com/profile/api-tokens](CloudFlare Dashboard) and create a Worker token. For this project we need access to Workers, D1 and Pages. |" >> $GITHUB_STEP_SUMMARY
            result=1
          else 
            printf "| ✅ `CLOUDFLARE_API_TOKEN` | Found |" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            printf "| ❌ `CLOUDFLARE_ACCOUNT_ID` | Please go to [https://dash.cloudflare.com/?to=/:account/workers](CloudFlare Workers Page) and copy the account id from the right sidebar. Note that you might need to create a "Hello World" worker before you see the account id in the interface. |" >> $GITHUB_STEP_SUMMARY
            result=1
          else 
            printf "| ✅ `CLOUDFLARE_ACCOUNT_ID` | Found |" >> $GITHUB_STEP_SUMMARY
          fi
          if [-z "$TELEGRAM_BOT_TOKEN" ]; then
            printf "| ❌ `TELEGRAM_BOT_TOKEN` | Please create a Telegram bot via [@BotFather](https://t.me/botfather) and set the token as a secret in your repository. |" >> $GITHUB_STEP_SUMMARY
            result=1
          else 
            printf "| ✅ `TELEGRAM_BOT_TOKEN` | Found |" >> $GITHUB_STEP_SUMMARY
          fi

          printf "\n\nTo set the secrets, go to [current repository's secrets settings](${{ github.server_url }}/${{ github.repository }}/settings/secrets/actions)" >> $GITHUB_STEP_SUMMARY
          exit $result
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cloudflare Workers CLI and tomlq
        run: |
          npm install -g wrangler
          pip install yq
      
      - name: Parse toml to get worker name
        id: determine_worker
        run: |
          tomlq -r .name ./wrangler.toml | printf name=$(cat) >> $GITHUB_OUTPUT      
      
      - name: Parse toml to get database name and id
        id: determine_database
        run: |
          tomlq -r .d1_databases[0].database_name ./wrangler.toml | printf name=$(cat) >> $GITHUB_OUTPUT
          tomlq -r .d1_databases[0].database_id ./wrangler.toml | printf id=$(cat) >> $GITHUB_OUTPUT
           
      - name: Call CloudFlare API to determine the workers.dev subdomain
        id: get_subdomain
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          curl -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/subdomain" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.result.subdomain' | printf subdomain=$(cat).workers.dev >> $GITHUB_OUTPUT
           
      - name: Call CloudFlare API to find the database id by name
        id: get_db_id_by_name
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          curl -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/d1/database?name=${{ steps.determine_database.outputs.name }}" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.result[0].uuid' | printf uuid=$(cat) >> $GITHUB_OUTPUT           
      
      - name: Call CloudFlare API to find the database name by id
        id: get_db_name_by_id
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          curl -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/d1/database/${{ steps.determine_database.outputs.id }}" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.result[0].name' | printf name=$(cat) >> $GITHUB_OUTPUT

 