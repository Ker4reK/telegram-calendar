name: Check inputs and gather data

on:
  workflow_dispatch:
  workflow_call:
    outputs:
      worker_name:
        value: ${{ jobs.deploy.outputs.worker_name }}
        description: The name of the CloudFlare worker
      subdomain:
        value: ${{ jobs.deploy.outputs.subdomain }}
        description: The subdomain of the CloudFlare worker
      worker_url:
        value: https://${{ jobs.deploy.outputs.worker_name }}.${{ jobs.deploy.outputs.subdomain }}.workers.dev
        description: The URL of the CloudFlare worker  
      pages_url:
        value: ${{ jobs.deploy.outputs.pages_url }}
        description: The URL of the CloudFlare Pages deployment
      database_name:
        value: ${{ jobs.deploy.outputs.database_name }}
        description: The name of the CloudFlare database as described in wrangler.toml
      apparent_database_name:
        value: ${{ jobs.deploy.outputs.database_apparent_name }}
        description: The name of the CloudFlare database as determined by its id
      database_id:
        value: ${{ jobs.deploy.outputs.database_id }}
        description: The id of the CloudFlare database as described in wrangler.toml
      apparent_database_id:
        value: ${{ jobs.deploy.outputs.database_apparent_id }}
        description: The id of the CloudFlare database as determined by its name
      


jobs:
  deploy:
    name: Check inputs and gather data
    runs-on: ubuntu-latest
    outputs:
      worker_name: ${{ steps.determine_worker.outputs.name }}
      database_name: ${{ steps.determine_database.outputs.name }}
      database_id: ${{ steps.determine_database.outputs.id }}
      subdomain: ${{ steps.get_subdomain.outputs.subdomain }}
      database_apparent_id: ${{ steps.get_db_id_by_name.outputs.uuid }}
      database_apparent_name: ${{ steps.get_db_name_by_id.outputs.name }}
      pages_url: ${{ steps.get_pages_url.outputs.url }}
    steps:
      - name: Check that the secrets are set in the repository
        id: check_secrets_set
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        run: |
          result=0
          printf "### Checking if secrets are set 🔐\n\n" >> $GITHUB_STEP_SUMMARY
          printf "| Secret | Description |\n" >> $GITHUB_STEP_SUMMARY
          printf "| --- | --- |\n" >> $GITHUB_STEP_SUMMARY
          if [ -z "$CLOUDFLARE_API_TOKEN" ]; then
            printf "| ❌ \`CLOUDFLARE_API_TOKEN\`| Please go to [https://dash.cloudflare.com/profile/api-tokens](CloudFlare Dashboard) and create a Worker token. For this project we need access to Workers, D1 and Pages. |\n" >> $GITHUB_STEP_SUMMARY
            result=1
          else 
            printf "| ✅ \`CLOUDFLARE_API_TOKEN\` | Found |\n" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -z "$CLOUDFLARE_ACCOUNT_ID" ]; then
            printf "| ❌ \`CLOUDFLARE_ACCOUNT_ID\` | Please go to [https://dash.cloudflare.com/?to=/:account/workers](CloudFlare Workers Page) and copy the account id from the right sidebar. Note that you might need to create a "Hello World" worker before you see the account id in the interface. |\n" >> $GITHUB_STEP_SUMMARY
            result=1
          else 
            printf "| ✅ \`CLOUDFLARE_ACCOUNT_ID\` | Found |\n" >> $GITHUB_STEP_SUMMARY
          fi
          if [-z "$TELEGRAM_BOT_TOKEN" ]; then
            printf "| ❌ \`TELEGRAM_BOT_TOKEN\` | Please create a Telegram bot via [@BotFather](https://t.me/botfather) and set the token as a secret in your repository. |\n" >> $GITHUB_STEP_SUMMARY
            result=1
          else 
            printf "| ✅ \`TELEGRAM_BOT_TOKEN\` | Found |\n" >> $GITHUB_STEP_SUMMARY
          fi

          printf "\n\nTo set the secrets, go to [current repository's secrets settings](${{ github.server_url }}/${{ github.repository }}/settings/secrets/actions)\n" >> $GITHUB_STEP_SUMMARY
          exit $result
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cloudflare Workers CLI and tomlq
        run: |
          # npm install -g wrangler
          pip install yq
      
      - name: Parse toml to get worker name
        id: determine_worker
        run: |
          tomlq -r .name ./wrangler.toml | echo name=$(cat) >> $GITHUB_OUTPUT      
      
      - name: Parse toml to get database name and id
        id: determine_database
        run: |
          tomlq -r .d1_databases[0].database_name ./wrangler.toml | echo name=$(cat) >> $GITHUB_OUTPUT
          tomlq -r .d1_databases[0].database_id ./wrangler.toml | echo id=$(cat) >> $GITHUB_OUTPUT
           
      - name: Call CloudFlare API to determine the workers.dev subdomain
        id: get_subdomain
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          curl -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/workers/subdomain" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.result.subdomain' | echo subdomain=$(cat).workers.dev >> $GITHUB_OUTPUT
           
      - name: Call CloudFlare API to find the database id by name
        id: get_db_id_by_name
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          curl -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/d1/database?name=${{ steps.determine_database.outputs.name }}" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.result[0].uuid' | echo uuid=$(cat) >> $GITHUB_OUTPUT           
      
      - name: Call CloudFlare API to find the database name by id
        id: get_db_name_by_id
        env: 
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          curl -X GET "https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/d1/database/${{ steps.determine_database.outputs.id }}" \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.result[0].name' | echo name=$(cat) >> $GITHUB_OUTPUT
      
      - name: Call CloudFlare API to find Pages URL
        id: get_pages_url
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          curl -X GET https://api.cloudflare.com/client/v4/accounts/$CLOUDFLARE_ACCOUNT_ID/pages/projects/${{ steps.determine_worker.outputs.name }} \
          -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" | jq -r '.result.canonical_deployment.aliases[0]' | echo url=$(cat) >> $GITHUB_OUTPUT
      
      - name: Show all the outputs in summary
        id: show_outputs
        run: |
          printf "\n\n### Outputs\n" >> $GITHUB_STEP_SUMMARY
          printf "| Name | Value |\n" >> $GITHUB_STEP_SUMMARY
          printf "| --- | --- |\n" >> $GITHUB_STEP_SUMMARY
          printf "| worker_name | ${{ steps.determine_worker.outputs.name }} |\n" >> $GITHUB_STEP_SUMMARY
          printf "| subdomain | ${{ steps.get_subdomain.outputs.subdomain }} |\n" >> $GITHUB_STEP_SUMMARY
          printf "| worker_url | https://${{ steps.determine_worker.outputs.name }}.${{ steps.get_subdomain.outputs.subdomain }}.workers.dev |\n" >> $GITHUB_STEP_SUMMARY
          printf "| pages_url | ${{ steps.get_pages_url.outputs.url }} |\n" >> $GITHUB_STEP_SUMMARY
          printf "| database_name | ${{ steps.determine_database.outputs.name }} |\n" >> $GITHUB_STEP_SUMMARY
          printf "| apparent_database_name | ${{ steps.get_db_name_by_id.outputs.name }} |\n" >> $GITHUB_STEP_SUMMARY
          printf "| database_id | ${{ steps.determine_database.outputs.id }} |\n" >> $GITHUB_STEP_SUMMARY
          printf "| apparent_database_id | ${{ steps.get_db_id_by_name.outputs.uuid }} |\n" >> $GITHUB_STEP_SUMMARY
